Development Environment
=======================

Overview
--------
k-Wave-python is a Python interface to the k-Wave C++ binaries, which are required to run simulations. The binaries are automatically downloaded when the package runs for the first time.

Environment Setup with uv
-------------------------

1. Install uv
~~~~~~~~~~~~~
.. code-block:: bash

    curl -LsSf https://astral.sh/uv/install.sh | sh

2. Clone the Repository
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: bash

    git clone https://github.com/waltsims/k-wave-python
    cd k-wave-python

3. Create and Activate Virtual Environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: bash

    uv venv
    source .venv/bin/activate  # On Windows: .venv\Scripts\activate

4. Install Dependencies
~~~~~~~~~~~~~~~~~~~~~~~
Install development and testing dependencies using uv:

.. code-block:: bash

    uv pip install -e '.[dev,test]'

5. Configure Pre-commit Hooks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: bash

    pre-commit install

Testing
-------

Prerequisites
~~~~~~~~~~~~~
- MATLAB installed locally (see `Alternative to MATLAB`_ if you don't have MATLAB)
- `k-Wave <https://github.com/ucl-bug/k-wave>`_ installed in a parallel directory to k-wave-python

**Directory structure for parallel installation:**

.. code-block:: text

    ~/projects/
    ├── k-wave/
    │   ├── k-Wave/
    │   ├── LICENSE.txt
    │   └── README.md
    └── k-wave-python/
        ├── kwave/
        └── ...


Running Tests
~~~~~~~~~~~~~

Full Test Suite
^^^^^^^^^^^^^^^
Generate reference files with MATLAB and run the complete Python test suite:

.. code-block:: bash

    make test

Manual Test Execution
^^^^^^^^^^^^^^^^^^^^^
After reference generation:

.. code-block:: bash

    pytest

Test Coverage
^^^^^^^^^^^^^
.. code-block:: bash

    coverage run

Running Examples
~~~~~~~~~~~~~~~~

Default (GPU-enabled)
^^^^^^^^^^^^^^^^^^^^^
.. code-block:: bash

    make run-examples
    # or
    MPLBACKEND=Agg python run_examples.py

Force CPU Execution
^^^^^^^^^^^^^^^^^^
.. code-block:: bash

    MPLBACKEND=Agg KWAVE_FORCE_CPU=1 python run_examples.py

Test Architecture
-----------------

The test suite compares Python and MATLAB outputs through two methodologies:

1. Unit Testing
~~~~~~~~~~~~~~~
- Tests k-Wave-python functions against their MATLAB counterparts
- Reference outputs stored in ``.mat`` files
- Generated by MATLAB scripts in ``tests/matlab_test_data_collectors/matlab_collectors/``
- Master script: ``tests/matlab_test_data_collectors/run_all_collectors.m``
- Output location: ``tests/matlab_test_data_collectors/python_testers/collectedValues/``

.. _`Alternative to MATLAB`:

.. note::
   **Alternative to MATLAB:** If you don't have a local MATLAB installation, you can download pre-generated reference artifacts from `GitHub CI <https://nightly.link/waltsims/k-wave-python/workflows/pytest/master/matlab_reference_test_values.zip>`_.


.. _`GitHub CI artifacts link`: https://nightly.link/waltsims/k-wave-python/workflows/pytest/master/matlab_reference_test_values.zip

2. Integration Testing
~~~~~~~~~~~~~~~~~~~~~~
- Validates ``.h5`` files produced by k-Wave-python against original k-Wave outputs
- Uses hash values from MATLAB examples stored in JSON files
- Hash files location: ``tests/reference_outputs/``
- These files are committed to the repository and only require updates for new k-Wave releases

Generating MATLAB Reference Files
---------------------------------

Process for Creating Reference Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Open target MATLAB example (e.g., ``example_pr_2D_TR_directional_sensors.m`` from the `k-Wave repository <https://github.com/ucl-bug/k-wave/blob/main/k-Wave/examples/example_pr_2D_TR_directional_sensors.m>`_)

2. Locate ``kSpaceFirstOrder`` function call:

   .. code-block:: matlab
   
       input_args = {'PMLInside', false, 'PMLSize', PML_size, 'PlotPML', false, 'Smooth', false};
       sensor_data = kspaceFirstOrder2D(kgrid, medium, source, sensor, input_args{:});

3. Add save options to ``input_args``:

   .. code-block:: matlab
   
       input_args = {'PMLInside', false, 'PMLSize', PML_size, 'PlotPML', false, 'Smooth', false, 'SaveToDisk', true, 'SaveToDiskExit', true};

4. Run modified example to generate ``.h5`` files in your ``tmp`` folder:

   - Single function call: creates ``example_input.h5``
   - Multiple calls: creates ``example_input_1.h5``, ``example_input_2.h5``, etc.

5. Convert ``.h5`` files to JSON hashes using ``H5Summary``:

   - Single file: see `lines 92-95 <https://github.com/waltsims/k-wave-python/blob/1f9df5d987d0b3edb1a8a43fad0885d3d6079029/tests/h5_summary.py#L92-L95>`_
   - Multiple files: see `lines 97-106 <https://github.com/waltsims/k-wave-python/blob/1f9df5d987d0b3edb1a8a43fad0885d3d6079029/tests/h5_summary.py#L97-L106>`_
