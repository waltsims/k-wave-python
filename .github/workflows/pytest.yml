name: pytest

on: [push, pull_request]

jobs:
  collect_references:
    name: collect_references
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          path: k-Wave-python
      - name: Calculate matlab refs hash
        id: matlab-refs-hash
        run: |
          MATLAB_REFS_HASH=$(sha1sum ./k-Wave-python/tests/matlab_test_data_collectors/matlab_collectors/**/*  | sha1sum |  awk '{ print $1 }');
          echo "$MATLAB_REFS_HASH" >> matlab_refs_hash.txt;
          echo "MATLAB_REFS_HASH=$MATLAB_REFS_HASH" >> $GITHUB_OUTPUT
      - name: Cache collected references
        uses: actions/cache@v3
        id: cache-matlab-refs
        env:
          cache-name: cache-matlab-references
        with:
            key: ${{ steps.matlab-refs-hash.outputs.MATLAB_REFS_HASH }}
            path: ./collectedValues.tar.gz
      - name: checkout reference k-Wave repo
        if: ${{ steps.cache-matlab-refs.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4
        with:
          repository: ucl-bug/k-wave
          path: k-wave
          ref: v1.4.0
      - name: setup MATLAB
        uses: matlab-actions/setup-matlab@v1
        if: ${{ steps.cache-matlab-refs.outputs.cache-hit != 'true' }}
      - name: run reference generation
        uses: matlab-actions/run-command@v1
        if: ${{ steps.cache-matlab-refs.outputs.cache-hit != 'true' }}
        with:
          command: |
            ls;
            pwd;
            if exist('k-wave/k-Wave'); ls 'k-wave/k-Wave'; end;
            addpath('k-Wave-python','k-wave/k-Wave');
            cd k-Wave-python/tests/matlab_test_data_collectors;
            run_all_collectors;
      - name: compress artifact
        uses: a7ul/tar-action@v1.1.0
        if: ${{ steps.cache-matlab-refs.outputs.cache-hit != 'true' }}
        with:
          command: c
          cwd: ./k-Wave-python/tests/matlab_test_data_collectors/matlab_collectors/
          files: |
            ./collectedValues
          outPath: collectedValues.tar.gz
      - name: Upload matlab references hash as artifact
        uses: actions/upload-artifact@v3
        with:
          name: matlab_refs_hash
          path: matlab_refs_hash.txt
  test:
    needs: collect_references
    strategy:
      matrix:
        os: [ "windows-latest", "ubuntu-latest" ] #, "macos-latest"]
        python-version: [ "3.8", "3.9", "3.10" ]
    runs-on: ${{matrix.os}}
    steps:
      - name: Download collectedValues
        uses: actions/download-artifact@v3
        with:
          name: matlab_refs_hash
          path: matlab_refs_hash.txt
      - name: Read matlab references hash
        id: read-matlab-refs-hash
        run: echo "MATLAB_REFS_HASH=$(cat matlab_refs_hash.txt)" >> $GITHUB_OUTPUT
      - name: Cache collected references
        uses: actions/cache@v3
        id: cache-matlab-refs
        env:
          cache-name: cache-matlab-references
        with:
            key: ${{ steps.read-matlab-refs-hash.outputs.MATLAB_REFS_HASH }}
            path: ./collectedValues.tar.gz
            fail-on-cache-miss: true
      - name: Move file
        run: mv ./collectedValues.tar.gz ./tests/matlab_test_data_collectors/python_testers/collectedValues.tar.gz  
      - name: unpack collectedValues
        uses: a7ul/tar-action@v1.1.0
        with:
          command: x
          cwd: ./tests/matlab_test_data_collectors/python_testers/
          files: ./tests/matlab_test_data_collectors/python_testers/collectedValues.tar.gz
      - name: where are the files?
        run: |
          ls ./tests/matlab_test_data_collectors/python_testers/
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install '.[test]'
      - name: Test with pytest
        run: |
          pytest
#      - name: Lint with flake8
#        run: |
#          # stop the build if there are Python syntax errors or undefined names
#          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
